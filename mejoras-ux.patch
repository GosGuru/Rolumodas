 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/README.md b/README.md
index 3a51d10f9a947dfcb7715207987fe5e5c7aaef43..29b7d65364eb909ca6d972e4e4b6eb12f99ae0e4 100644
--- a/README.md
+++ b/README.md
@@ -1,14 +1,18 @@
 # Rolumodas
 
 ## Serverless Proxy for Mercado Pago
 
 This project uses a Vercel serverless function to create Mercado Pago
 preferences without running into CORS issues. Configure the following
 environment variables in your hosting platform:
 
 - `SUPABASE_URL` – your Supabase project URL.
 - `SUPABASE_SERVICE_KEY` – a service role key with permission to invoke
   functions.
 
 The function lives at `api/create-mercadopago-preference.js` and is
-called from the checkout page.
+called from the checkout page. It now accepts a `max_installments` value
+so that the admin can limit the number of Mercado Pago installments.
+
+The limit is stored in the `site_content` table with the key
+`mp_max_installments` and can be managed from the admin dashboard.
diff --git a/api/create-mercadopago-preference.js b/api/create-mercadopago-preference.js
index e8c7bb1564e5fda1aa629650edd756b92d9c6a3b..58c37f8d48d7c1b553eb395d78ae650a01db40ce 100644
--- a/api/create-mercadopago-preference.js
+++ b/api/create-mercadopago-preference.js
@@ -18,73 +18,78 @@ export default async function handler(req, res) {
   }
 
   try {
     // Validar variables de entorno primero
     const required = [
       "NEXT_PUBLIC_SUPABASE_URL",
       "SUPABASE_SERVICE_ROLE_KEY",
       "MERCADOPAGO_ACCESS_TOKEN",
     ];
     required.forEach((n) => {
       if (!process.env[n]) throw new Error(`Missing env var: ${n}`);
     });
 
     // Inicializar clientes externos
     const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
     const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
     const mpToken = process.env.MERCADOPAGO_ACCESS_TOKEN;
 
     const supabase = createClient(supabaseUrl, serviceKey);
     const mp = new MercadoPagoConfig({
       accessToken: mpToken,
       options: { timeout: 5000 },
     });
 
     // Tomar datos del body
-    const { items = [], shipping_method } = req.body || {};
+    const { items = [], shipping_method, max_installments } = req.body || {};
 
     if (!Array.isArray(items) || items.length === 0) {
       return res.status(400).json({ message: "Invalid items" });
     }
 
     const preferenceItems = items.map((item) => ({
       title: item.name,
       quantity: item.quantity,
       currency_id: "UYU",
       unit_price: item.price,
     }));
 
     const totalAmount = preferenceItems.reduce(
       (sum, item) => sum + item.unit_price * item.quantity,
       0
     );
 
     // Crear preferencia en MercadoPago usando el recurso Preference
     const preferenceClient = new Preference(mp);
 
     const mpPreference = await preferenceClient.create({
-      body: { items: preferenceItems },
+      body: {
+        items: preferenceItems,
+        payment_methods: {
+          installments: max_installments || 5,
+        },
+      },
     });
 
     const preferenceId = mpPreference.id;
 
     // Guardar orden en Supabase
     const orderData = {
       order_number: crypto.randomUUID(),
       items: preferenceItems,
       total_amount: totalAmount,
       status: "pending",
       payment_method: "mercadopago",
       payment_id: preferenceId,
       payment_status: "pending",
       shipping_method: shipping_method || null,
     };
 
     const { error } = await supabase.from("orders").insert([orderData]);
 
     if (error) {
       console.error("Supabase insert error:", error);
       return res.status(500).json({ message: "Error creating order" });
     }
 
     res.setHeader("Access-Control-Allow-Origin", "*");
     return res.status(200).json({ preferenceId });
diff --git a/src/components/admin/SiteManagement.jsx b/src/components/admin/SiteManagement.jsx
index 5cbb135cb87f1f90bfe7c79acc51b37481350562..461ee09aeea265b9a2e92a3b4f533fe19433e573 100644
--- a/src/components/admin/SiteManagement.jsx
+++ b/src/components/admin/SiteManagement.jsx
@@ -1,120 +1,170 @@
 
 import React, { useState, useEffect, useRef } from 'react';
 import { motion } from 'framer-motion';
 import { Button } from '@/components/ui/button';
 import { supabase } from '@/lib/supabaseClient';
 import { toast } from '@/components/ui/use-toast';
 import { UploadCloud, Loader2 } from 'lucide-react';
 
 const SiteManagement = () => {
   const [heroImage, setHeroImage] = useState('');
   const [newHeroImageFile, setNewHeroImageFile] = useState(null);
   const [preview, setPreview] = useState('');
   const [loading, setLoading] = useState(true);
   const [uploading, setUploading] = useState(false);
+  const [mpInstallments, setMpInstallments] = useState(5);
+  const [savingInstallments, setSavingInstallments] = useState(false);
   const fileInputRef = useRef(null);
 
   useEffect(() => {
-    const fetchHeroImage = async () => {
+    const fetchData = async () => {
       setLoading(true);
-      const { data, error } = await supabase
+      const heroPromise = supabase
         .from('site_content')
         .select('content_value')
         .eq('content_key', 'hero_image')
         .single();
 
-      if (error || !data) {
-        toast({ title: "Error", description: "No se pudo cargar la imagen de fondo.", variant: "destructive" });
-      } else {
-        setHeroImage(data.content_value.url);
-        setPreview(data.content_value.url);
+      const installmentsPromise = supabase
+        .from('site_content')
+        .select('content_value')
+        .eq('content_key', 'mp_max_installments')
+        .single();
+
+      const [heroRes, instRes] = await Promise.all([heroPromise, installmentsPromise]);
+
+      if (!heroRes.error && heroRes.data) {
+        setHeroImage(heroRes.data.content_value.url);
+        setPreview(heroRes.data.content_value.url);
+      }
+
+      if (!instRes.error && instRes.data) {
+        const value = parseInt(instRes.data.content_value.value, 10);
+        if (!isNaN(value)) setMpInstallments(value);
+      }
+
+      if (heroRes.error || !heroRes.data) {
+        toast({ title: 'Error', description: 'No se pudo cargar la imagen de fondo.', variant: 'destructive' });
       }
+
       setLoading(false);
     };
-    fetchHeroImage();
+    fetchData();
   }, []);
 
   const handleFileChange = (e) => {
     const file = e.target.files[0];
     if (file) {
       setNewHeroImageFile(file);
       setPreview(URL.createObjectURL(file));
     }
   };
 
-  const handleSave = async () => {
+  const handleSaveHero = async () => {
     if (!newHeroImageFile) {
       toast({ title: "Sin cambios", description: "No has seleccionado una nueva imagen." });
       return;
     }
     setUploading(true);
     try {
       const fileExt = newHeroImageFile.name.split('.').pop();
       const fileName = `hero-${Date.now()}.${fileExt}`;
       const filePath = `public/${fileName}`;
       
       const { error: uploadError } = await supabase.storage.from('site-assets').upload(filePath, newHeroImageFile);
       if (uploadError) throw uploadError;
 
       const { data: urlData } = supabase.storage.from('site-assets').getPublicUrl(filePath);
       const newUrl = urlData.publicUrl;
 
       const { error: dbError } = await supabase
         .from('site_content')
         .update({ content_value: { url: newUrl } })
         .eq('content_key', 'hero_image');
       
       if (dbError) throw dbError;
 
       setHeroImage(newUrl);
       setNewHeroImageFile(null);
       toast({ title: "Éxito", description: "Imagen de fondo actualizada." });
 
     } catch (error) {
       toast({ title: "Error", description: `No se pudo guardar la imagen: ${error.message}`, variant: "destructive" });
     } finally {
       setUploading(false);
     }
   };
 
+  const handleSaveInstallments = async () => {
+    setSavingInstallments(true);
+    try {
+      const { error } = await supabase
+        .from('site_content')
+        .upsert({ content_key: 'mp_max_installments', content_value: { value: mpInstallments } }, { onConflict: 'content_key' });
+      if (error) throw error;
+      toast({ title: 'Éxito', description: 'Configuración actualizada.' });
+    } catch (error) {
+      toast({ title: 'Error', description: `No se pudo guardar: ${error.message}`, variant: 'destructive' });
+    } finally {
+      setSavingInstallments(false);
+    }
+  };
+
   return (
     <motion.div
       initial={{ opacity: 0, y: 20 }}
       animate={{ opacity: 1, y: 0 }}
       transition={{ duration: 0.6, delay: 0.6 }}
       className="lg:col-span-3 bg-gray-900 shadow-sm border border-gray-700"
     >
       <div className="p-6 border-b border-gray-700">
         <h2 className="text-xl font-negro">Personalización del Sitio</h2>
       </div>
       <div className="p-6 space-y-4">
         <h3 className="font-negro text-white">Imagen de Fondo Principal</h3>
         {loading ? (
           <div className="flex justify-center items-center h-48"><Loader2 className="h-8 w-8 animate-spin"/></div>
         ) : (
           <div className="grid grid-cols-1 md:grid-cols-2 gap-6 items-center">
             <div>
               <p className="text-sm text-gray-400 mb-2">Vista Previa Actual</p>
               <div className="aspect-video bg-gray-800 border border-gray-700">
                 {preview && <img src={preview} alt="Vista previa de la imagen de fondo" className="w-full h-full object-cover"/>}
               </div>
             </div>
             <div className="space-y-4">
               <input type="file" ref={fileInputRef} onChange={handleFileChange} className="hidden" accept="image/*"/>
               <Button variant="outline" className="w-full border-gray-600" onClick={() => fileInputRef.current?.click()}>
                 <UploadCloud className="h-4 w-4 mr-2"/>
                 Seleccionar Nueva Imagen
               </Button>
-              <Button className="w-full bg-white text-black hover:bg-gray-300" onClick={handleSave} disabled={uploading || !newHeroImageFile}>
+              <Button className="w-full bg-white text-black hover:bg-gray-300" onClick={handleSaveHero} disabled={uploading || !newHeroImageFile}>
                 {uploading ? <Loader2 className="h-4 w-4 animate-spin mr-2"/> : null}
                 {uploading ? 'Guardando...' : 'Guardar Cambios'}
               </Button>
             </div>
           </div>
         )}
       </div>
+      <div className="pt-8 space-y-4 border-t border-gray-700 mt-8">
+        <h3 className="font-negro text-white">Cuotas Máximas Mercado Pago</h3>
+        <div className="flex items-end space-x-4">
+          <input
+            type="number"
+            min="1"
+            max="12"
+            value={mpInstallments}
+            onChange={(e) => setMpInstallments(parseInt(e.target.value, 10) || 1)}
+            className="w-24 bg-gray-800 border border-gray-700 text-white p-2 rounded-md"
+          />
+          <Button className="bg-white text-black hover:bg-gray-300" onClick={handleSaveInstallments} disabled={savingInstallments}>
+            {savingInstallments ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : null}
+            {savingInstallments ? 'Guardando...' : 'Guardar'}
+          </Button>
+        </div>
+      </div>
     </motion.div>
   );
 };
 
 export default SiteManagement;
diff --git a/src/contexts/AuthContext.jsx b/src/contexts/AuthContext.jsx
index c7c8f7c4029a3449075bde409f733512dcaf1368..7d5dc55997322ecb13ed1cbc0822843264783f49 100644
--- a/src/contexts/AuthContext.jsx
+++ b/src/contexts/AuthContext.jsx
@@ -1,80 +1,91 @@
 
 import React, { createContext, useContext, useState, useEffect } from 'react';
 import { supabase } from '@/lib/supabaseClient';
 
 const AuthContext = createContext();
 
 export const AuthProvider = ({ children }) => {
   const [isAuthenticated, setIsAuthenticated] = useState(false);
   const [user, setUser] = useState(null);
   const [loading, setLoading] = useState(true);
 
   useEffect(() => {
     const getSession = async () => {
       const { data: { session } } = await supabase.auth.getSession();
       if (session) {
         setIsAuthenticated(true);
         setUser(session.user);
+        localStorage.setItem('rolu-admin-session', JSON.stringify(session));
+      } else {
+        const stored = localStorage.getItem('rolu-admin-session');
+        if (stored) {
+          const parsed = JSON.parse(stored);
+          setIsAuthenticated(true);
+          setUser(parsed.user);
+        }
       }
       setLoading(false);
     };
 
     getSession();
 
     const { data: authListener } = supabase.auth.onAuthStateChange((event, session) => {
       if (event === 'SIGNED_IN') {
         setIsAuthenticated(true);
         setUser(session.user);
       }
       if (event === 'SIGNED_OUT') {
         setIsAuthenticated(false);
         setUser(null);
       }
     });
 
     return () => {
       authListener.subscription.unsubscribe();
     };
   }, []);
 
   const login = async (email, password) => {
     const { data, error } = await supabase.auth.signInWithPassword({
       email,
       password,
     });
 
     if (error) {
       return { success: false, error: error.message };
     }
-    
+
+    localStorage.setItem('rolu-admin-session', JSON.stringify(data.session));
+
     return { success: true, data };
   };
 
   const logout = async () => {
     await supabase.auth.signOut();
     setIsAuthenticated(false);
     setUser(null);
+    localStorage.removeItem('rolu-admin-session');
   };
 
   const value = {
     isAuthenticated,
     user,
     loading,
     login,
     logout,
   };
 
   return (
     <AuthContext.Provider value={value}>
       {!loading && children}
     </AuthContext.Provider>
   );
 };
 
 export const useAuth = () => {
   const context = useContext(AuthContext);
   if (!context) {
     throw new Error('useAuth must be used within an AuthProvider');
   }
   return context;
 };
diff --git a/src/lib/supabaseClient.js b/src/lib/supabaseClient.js
index a5f2357770d6dd896205cfe01ca1b5f64c5998f7..33ab277e5d04da8ee39ecd8a0501a1b2066de3bc 100644
--- a/src/lib/supabaseClient.js
+++ b/src/lib/supabaseClient.js
@@ -1,7 +1,12 @@
 
 import { createClient } from '@supabase/supabase-js';
 
 const supabaseUrl = 'https://wrsdfutpfzmmckttzazh.supabase.co';
 const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Indyc2RmdXRwZnptbWNrdHR6YXpoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA0MDYzNTEsImV4cCI6MjA2NTk4MjM1MX0.pquuFugMji030hp1Mxb2Tp8azmC9xvvIh3APQROIGa0';
 
-export const supabase = createClient(supabaseUrl, supabaseAnonKey);
+export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
+  auth: {
+    persistSession: true,
+    autoRefreshToken: true,
+  },
+});
diff --git a/src/pages/CheckoutPage.jsx b/src/pages/CheckoutPage.jsx
index 184999f544ba47ecb368f17d0b96b40e29f98300..1d3a6616576e416a2d389d8719be2d4fe4cc0129 100644
--- a/src/pages/CheckoutPage.jsx
+++ b/src/pages/CheckoutPage.jsx
@@ -1,66 +1,97 @@
 import React, { useState, useEffect } from 'react';
 import { Link, useNavigate } from 'react-router-dom';
 import { Helmet } from 'react-helmet';
 import { motion, AnimatePresence } from 'framer-motion';
 import { useCart } from '@/contexts/CartContext';
 import { Button } from '@/components/ui/button';
 import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
 import { Label } from '@/components/ui/label';
 import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
 import { Info, Truck, CreditCard, Loader2 } from 'lucide-react';
 import { toast } from '@/components/ui/use-toast';
 import { Wallet } from '@mercadopago/sdk-react';
 import { supabase } from '@/lib/supabaseClient';
 
 const CheckoutPage = () => {
   const { items, getTotalPrice, clearCart } = useCart();
   const navigate = useNavigate();
   const [shippingMethod, setShippingMethod] = useState('pickup');
   const [paymentMethod, setPaymentMethod] = useState('manual');
   const [preferenceId, setPreferenceId] = useState(null);
   const [isProcessing, setIsProcessing] = useState(false);
+  const [mpInstallments, setMpInstallments] = useState(5);
 
   useEffect(() => {
     if (paymentMethod === 'mp' && !preferenceId && items.length > 0) {
       createPreference();
     }
-  }, [paymentMethod, items]);
+  }, [paymentMethod, items, mpInstallments]);
+
+  useEffect(() => {
+    const savedShip = localStorage.getItem('rolu-checkout-shipping');
+    const savedPay = localStorage.getItem('rolu-checkout-payment');
+    if (savedShip) setShippingMethod(savedShip);
+    if (savedPay) setPaymentMethod(savedPay);
+
+    const fetchInstallments = async () => {
+      const { data } = await supabase
+        .from('site_content')
+        .select('content_value')
+        .eq('content_key', 'mp_max_installments')
+        .single();
+      if (data) {
+        const val = parseInt(data.content_value.value, 10);
+        if (!isNaN(val)) setMpInstallments(val);
+      }
+    };
+    fetchInstallments();
+  }, []);
+
+  useEffect(() => {
+    localStorage.setItem('rolu-checkout-shipping', shippingMethod);
+  }, [shippingMethod]);
+
+  useEffect(() => {
+    localStorage.setItem('rolu-checkout-payment', paymentMethod);
+  }, [paymentMethod]);
 
   const createPreference = async () => {
     setIsProcessing(true);
     try {
       const response = await fetch('/api/create-mercadopago-preference', {
         method: 'POST',
         headers: { 'Content-Type': 'application/json' },
         body: JSON.stringify({
           items: items.map(item => ({
             id: item.id,
             name: item.name,
             quantity: item.quantity,
             price: item.price,
           })),
+          shipping_method: shippingMethod,
+          max_installments: mpInstallments,
         }),
       });
 
       if (!response.ok) {
         throw new Error('No se pudo crear la preferencia de pago.');
       }
 
       const data = await response.json();
 
       if (!data.preferenceId) {
         throw new Error('No se pudo crear la preferencia de pago.');
       }
 
       setPreferenceId(data.preferenceId);
       toast({
         title: '¡Listo para pagar!',
         description: 'Se ha generado tu link de Mercado Pago.',
       });
 
     } catch (error) {
       toast({
         title: "Error con Mercado Pago",
         description: error.message,
         variant: "destructive"
       });
 
EOF
)